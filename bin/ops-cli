#!/usr/bin/env python
import click
import json
import requests

from gaas.config import api_endpoint


def url_for(resource: str) -> str:
    assert resource.startswith("/")
    return api_endpoint.geturl() + resource


def abort_if_false(ctx, param, value):
    if not value:
        ctx.abort()


@click.group()
def cli():
    pass


@click.command("cu")
@click.option("--file", "-f", default=None, type=click.File("r"), help="JSON file with new user creds.")
@click.option("--username", "-u", "-n", default=None, type=str, help="New username.")
@click.option("--email", "-e", default=None, type=str, help="New user's email.")
@click.option("--password", "-p", default=None, type=str, help="New user's password.")
def create_user(file, username, email, password):
    if not file and not (username and email and password):
        raise click.BadParameter("Must provide either file or name, email, and password.")
    if file:
        credentials = json.load(file)
    else:
        credentials = {
            "username": username,
            "email": email,
            "password": password
        }
    resp = requests.post(url=url_for("/signup"), json=credentials)
    resp.raise_for_status()
cli.add_command(create_user)


@click.command("du")
@click.option("--username", "-u", default=None, type=str, help="Username to delete.")
@click.option("--userid", "-id", default=None, type=str, help="User id to delete.")
@click.option("--yes", "-y", is_flag=True, callback=abort_if_false, expose_value=False,
              prompt="Are you sure you want to delete the user?")
def delete_user(username, userid):
    if not username and not userid:
        raise click.BadParameter("Must provide either username or user id")
    elif username and userid:
        raise click.BadParameter("Must provide only one of username or user id")
    if username:
        pass
    else:
        pass

if __name__ == "__main__":
    cli()
