#!/usr/bin/env python

import click
import json
import pprint
import requests
import requests.auth
from pathlib import Path

from cryptography.hazmat.backends import default_backend
from cryptography.hazmat.primitives import serialization
from cryptography.hazmat.primitives.asymmetric import rsa

from moldyboot.security.signatures import sign


def load_credentials(filename):
    path = Path(filename).expanduser()
    with path.open(mode="r") as file:
        return json.loads(file.read())


class Client:
    auth = None
    credentials = None
    endpoint = "http://127.0.0.1:8010"
    key = None
    key_id = None

    def __init__(self, credentials_file):
        self.auth = SignedAuth(self)
        self.credentials = load_credentials(credentials_file)
        self.refresh_key()

    def refresh_key(self):
        self.key = rsa.generate_private_key(
            public_exponent=66537,
            key_size=2048,
            backend=default_backend()
        )
        data = {
            **self.credentials,
            "public_key": self.key.public_key().public_bytes(
                encoding=serialization.Encoding.PEM,
                format=serialization.PublicFormat.SubjectPublicKeyInfo
            ).decode("utf-8")
        }
        resp = requests.post(self.endpoint + "/keys", json=data)
        resp.raise_for_status()
        self.key_id = resp.json()["key_id"]

    def revoke_key(self):
        resp = requests.delete(self.endpoint + "/keys", auth=self.auth)
        resp.raise_for_status()

    def check_public(self):
        resp = requests.get(self.endpoint + "/keys", auth=self.auth)
        resp.raise_for_status()
        return resp.json()


class SignedAuth(requests.auth.AuthBase):
    def __init__(self, client: Client):
        self.client = client

    def __call__(self, request: requests.PreparedRequest) -> requests.PreparedRequest:
        sign(
            method=request.method,
            path=request.path_url,
            headers=request.headers,
            body=request.body,
            private_key=self.client.key,
            id=self.client.key_id
        )
        return request


@click.group()
def cli():
    pass


@click.command("check")
@click.argument("credentials_file")
def check_public(credentials_file):
    client = Client(credentials_file)
    pprint.pprint(client.check_public())
cli.add_command(check_public)


if __name__ == "__main__":
    cli()
